// Code generated by protoc-gen-go. DO NOT EDIT.
// source: checkright.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IsOk struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsOk) Reset()         { *m = IsOk{} }
func (m *IsOk) String() string { return proto.CompactTextString(m) }
func (*IsOk) ProtoMessage()    {}
func (*IsOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9efa795285ff17, []int{0}
}

func (m *IsOk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsOk.Unmarshal(m, b)
}
func (m *IsOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsOk.Marshal(b, m, deterministic)
}
func (m *IsOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsOk.Merge(m, src)
}
func (m *IsOk) XXX_Size() int {
	return xxx_messageInfo_IsOk.Size(m)
}
func (m *IsOk) XXX_DiscardUnknown() {
	xxx_messageInfo_IsOk.DiscardUnknown(m)
}

var xxx_messageInfo_IsOk proto.InternalMessageInfo

func (m *IsOk) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Uid struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uid) Reset()         { *m = Uid{} }
func (m *Uid) String() string { return proto.CompactTextString(m) }
func (*Uid) ProtoMessage()    {}
func (*Uid) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9efa795285ff17, []int{1}
}

func (m *Uid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uid.Unmarshal(m, b)
}
func (m *Uid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uid.Marshal(b, m, deterministic)
}
func (m *Uid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uid.Merge(m, src)
}
func (m *Uid) XXX_Size() int {
	return xxx_messageInfo_Uid.Size(m)
}
func (m *Uid) XXX_DiscardUnknown() {
	xxx_messageInfo_Uid.DiscardUnknown(m)
}

var xxx_messageInfo_Uid proto.InternalMessageInfo

func (m *Uid) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*IsOk)(nil), "grpc.isOk")
	proto.RegisterType((*Uid)(nil), "grpc.Uid")
}

func init() { proto.RegisterFile("checkright.proto", fileDescriptor_0c9efa795285ff17) }

var fileDescriptor_0c9efa795285ff17 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xce, 0x48, 0x4d,
	0xce, 0x2e, 0xca, 0x4c, 0xcf, 0x28, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x2f,
	0x2a, 0x48, 0x56, 0x92, 0xe1, 0x62, 0xc9, 0x2c, 0xf6, 0xcf, 0x16, 0x12, 0xe1, 0x62, 0x2d, 0x4b,
	0xcc, 0x29, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x08, 0x82, 0x70, 0x94, 0xa4, 0xb9, 0x98,
	0x43, 0x33, 0x53, 0x50, 0x25, 0x39, 0xa1, 0x92, 0x46, 0x56, 0x5c, 0x82, 0xce, 0x20, 0x43, 0x83,
	0x40, 0x86, 0x06, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0xa9, 0x72, 0x71, 0x21, 0x04, 0x85,
	0x38, 0xf5, 0x40, 0x96, 0xe8, 0x85, 0x66, 0xa6, 0x48, 0x71, 0x41, 0x98, 0x20, 0xcb, 0x94, 0x18,
	0x92, 0xd8, 0xc0, 0x6e, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x8b, 0x35, 0x83, 0x97,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CheckRightServiceClient is the client API for CheckRightService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckRightServiceClient interface {
	CheckRight(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*IsOk, error)
}

type checkRightServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckRightServiceClient(cc grpc.ClientConnInterface) CheckRightServiceClient {
	return &checkRightServiceClient{cc}
}

func (c *checkRightServiceClient) CheckRight(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*IsOk, error) {
	out := new(IsOk)
	err := c.cc.Invoke(ctx, "/grpc.CheckRightService/CheckRight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckRightServiceServer is the server API for CheckRightService service.
type CheckRightServiceServer interface {
	CheckRight(context.Context, *Uid) (*IsOk, error)
}

// UnimplementedCheckRightServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCheckRightServiceServer struct {
}

func (*UnimplementedCheckRightServiceServer) CheckRight(ctx context.Context, req *Uid) (*IsOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRight not implemented")
}

func RegisterCheckRightServiceServer(s *grpc.Server, srv CheckRightServiceServer) {
	s.RegisterService(&_CheckRightService_serviceDesc, srv)
}

func _CheckRightService_CheckRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckRightServiceServer).CheckRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CheckRightService/CheckRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckRightServiceServer).CheckRight(ctx, req.(*Uid))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckRightService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CheckRightService",
	HandlerType: (*CheckRightServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckRight",
			Handler:    _CheckRightService_CheckRight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkright.proto",
}
