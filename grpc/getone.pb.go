// Code generated by protoc-gen-go. DO NOT EDIT.
// source: getone.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Result struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fe4d0f00b133b0e, []int{0}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type EmptyParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyParams) Reset()         { *m = EmptyParams{} }
func (m *EmptyParams) String() string { return proto.CompactTextString(m) }
func (*EmptyParams) ProtoMessage()    {}
func (*EmptyParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fe4d0f00b133b0e, []int{1}
}

func (m *EmptyParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyParams.Unmarshal(m, b)
}
func (m *EmptyParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyParams.Marshal(b, m, deterministic)
}
func (m *EmptyParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyParams.Merge(m, src)
}
func (m *EmptyParams) XXX_Size() int {
	return xxx_messageInfo_EmptyParams.Size(m)
}
func (m *EmptyParams) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyParams.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyParams proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Result)(nil), "grpc.Result")
	proto.RegisterType((*EmptyParams)(nil), "grpc.emptyParams")
}

func init() { proto.RegisterFile("getone.proto", fileDescriptor_0fe4d0f00b133b0e) }

var fileDescriptor_0fe4d0f00b133b0e = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x4f, 0x2d, 0xc9,
	0xcf, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x2f, 0x2a, 0x48, 0x96, 0x92,
	0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x8b, 0x25, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16,
	0x94, 0x54, 0x42, 0x94, 0x28, 0xc9, 0x71, 0xb1, 0x05, 0xa5, 0x16, 0x97, 0xe6, 0x94, 0x08, 0x89,
	0x70, 0xb1, 0x96, 0x25, 0xe6, 0x94, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x04, 0x41, 0x38,
	0x4a, 0xbc, 0x5c, 0xdc, 0x60, 0xe5, 0x01, 0x89, 0x45, 0x89, 0xb9, 0xc5, 0x46, 0x8e, 0x5c, 0xbc,
	0xee, 0xa9, 0x25, 0xfe, 0x79, 0xa9, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x06, 0x5c,
	0x6c, 0x10, 0x01, 0x21, 0x31, 0x3d, 0x88, 0x3d, 0x7a, 0x30, 0x7b, 0xf4, 0x5c, 0x41, 0x1a, 0xa5,
	0x78, 0xf4, 0x40, 0xae, 0xd0, 0x83, 0xd8, 0xa2, 0xc4, 0x90, 0xc4, 0x06, 0x96, 0x37, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xe7, 0x94, 0xc5, 0x71, 0xab, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GetOneServiceClient is the client API for GetOneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetOneServiceClient interface {
	GetOne(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Result, error)
}

type getOneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetOneServiceClient(cc grpc.ClientConnInterface) GetOneServiceClient {
	return &getOneServiceClient{cc}
}

func (c *getOneServiceClient) GetOne(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc.GetOneService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetOneServiceServer is the server API for GetOneService service.
type GetOneServiceServer interface {
	GetOne(context.Context, *empty.Empty) (*Result, error)
}

// UnimplementedGetOneServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGetOneServiceServer struct {
}

func (*UnimplementedGetOneServiceServer) GetOne(ctx context.Context, req *empty.Empty) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}

func RegisterGetOneServiceServer(s *grpc.Server, srv GetOneServiceServer) {
	s.RegisterService(&_GetOneService_serviceDesc, srv)
}

func _GetOneService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetOneServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.GetOneService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetOneServiceServer).GetOne(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetOneService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.GetOneService",
	HandlerType: (*GetOneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _GetOneService_GetOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getone.proto",
}
